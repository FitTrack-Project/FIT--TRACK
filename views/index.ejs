<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script
      src="https://kit.fontawesome.com/693f483c38.js"
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <title>Document</title>
    <style>
      body {
        margin: 0px;
      }

      /* ----------고정 상단바 ---------------------------------------------- */
      .defaultSetting {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
      }

      .mainTitle {
        background-color: rgb(182, 182, 182);
        padding: 20px;
        text-align: center;
        font-size: 40px;
      }
      .buttonBar {
        background-color: black;
        color: white;
        display: flex;
        justify-content: flex-end;
        align-items: center; /* 추가된 부분 */
        font-size: small;
      }

      .buttonBar > .mypost,
      .buttonBar > .write,
      .buttonBar > .list {
        padding: 1.3vw;
        cursor: pointer;
      }
      .buttonBar > .search {
        padding: 10px;
      }
      .buttonBar > .mypost:hover,
      .buttonBar > .write:hover,
      .buttonBar > .list:hover {
        background-color: white;
        color: black;
      }
      /* ------------------------------------------------------------------------------------- */
      /* 게시글의 bestPost ! margin-top으로 게시물 사이 간격 조정하기 */
      .bestPost {
        background-color: rgb(124, 173, 155);
        margin-top: 160px;
      }

      .best1 {
        color: blue;
      }

      /* ------------------------------------------------------------------------------------- */

      .mostRecentPost {
        background-color: rgb(124, 173, 155);
      }

      .bordTopbar {
        background-color: rgb(71, 71, 75);
        margin-top: 50px;
        margin-left: 50px;
        margin-right: 50px;
        /* padding-bottom: 15px; */
        height: 7vh;
        color: white;
        border-bottom: 1px solid black;
        display: flex; /* Flexbox 적용 */
        justify-content: space-between; /* 좌우 정렬 */
        align-items: center; /* 세로 가운데 정렬 */
        font-size: 15px;
      }

      .userContainer {
        display: flex;
        align-items: center;
        font-size: 15px;
      }
      /* 게시글의 내용  */
      .bordContent {
        background-color: rgb(225, 128, 225);
        margin-left: 50px;
        margin-right: 50px;
        color: white;
        font-size: 15px;
      }
      .bordContentTitle {
        background-color: green;
        display: flex;
        justify-content: center;
        /* align-items: center; */
      }
      .bordContentContent {
        background-color: blue;
        display: flex;
        justify-content: center;
        margin: 0px;
        padding: 20px;
      }

      /* 게시글의 댓글 */
      .bordComment {
        background-color: rgb(108, 150, 122);
        margin-left: 50px;
        margin-right: 50px;
        /* padding-bottom: 2vh; */
        /* border-bottom: 4vh; */
        height: 5vh;
        color: white;
        display: flex;
        align-items: center;
        justify-content: space-between;
        /* justify-content: center; */
        font-size: 20px;
      }

      /* 하트, 하트 수 */
      .bordComment > .heartNum {
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      /* 댓글, 댓글 수 */
      .commentNum {
        display: flex;
        align-items: center;
        justify-self: center;
      }

      /* 댓글쓰기, 댓글 보내기 container */
      .sendComment {
        display: flex;
        width: 70%;
      }

      /* 댓글쓰기 */
      .bordInputComment {
        width: 70%;
        height: 50%;
        resize: none;
        overflow: hidden;
      }
      /* ----------------------------------------------------------------------- */

      .emptyHeart {
        cursor: auto;
      }
    </style>
  </head>
  <!-- 고정 상단바 -->
  <body>
    <div class="defaultSetting">
      <div class="mainTitle">Fit Track</div>
      <div class="buttonBar">
        <div class="mypost" onclick="mypostButton()">내 게시물</div>
        <div class="write" onclick="writeButton()">쓰기</div>
        <div class="list" onclick="listButton()">목록</div>
        <div class="search">
          <input
            type="text"
            class="search"
            id="search"
            name="search"
            autocomplete="off"
          />
          <button id="searchButton" onclick="search()">검색</button>
        </div>
      </div>
    </div>

    <!-- bestPost, recentPost -->
    <div class="bestPost">
      <hr />
      <div>BEST POST</div>
      <hr />
    </div>

    <!-- 데이터베이스가 비어있을 경우, like_count가 0일 경우 BEST POST 출력 -->
    <ol>
      <% noPostCount = 0 %> <% if (bestPost.length === 0) { %>
      <div>게시물이 없습니다</div>
      <% } else { %> <% for (let i = 0; i < bestPost.length; i++) { %> <% if
      (bestPost[i].like_count === 0) { %> <% ++noPostCount %> <% continue %> <%
      } else { %>
      <hr />
      <li>
        <div
          class="best"
          id="best-<%= bestPost[i].post_id%>"
          onclick="clickBestPost(this)"
        >
          <%= bestPost[i].title %>
        </div>
      </li>
      <hr />
      <% } %> <% } %> <% } %>
    </ol>

    <div class="mostRecentPost">
      <hr />
      <div>Most Recent Post</div>
      <hr />
    </div>

    <!------------------------게시물 띄우기!!!---------------------------------------------------->
    <% if (searchAllData.length === 0) { %>
    <div class="noPosts">게시물이 없습니다.</div>
    <% } else { %> <% for (let i = 0; i < searchAllData.length; i++) { %>
    <!-- 게시물을 띄우는 창 -->
    <div class="postBord">
      <!-- 게시물 쓰기 창의 topbar -->
      <div class="bordTopbar">
        <div class="userContainer">
          <div class="userIcon">
            &nbsp;&nbsp;<i
              class="fa-solid fa-user fa-lg"
              style="color: #ffff"
            ></i>
          </div>
          <div class="userId">&nbsp;<%= searchAllData[i].user_id %></div>
        </div>
        <div class="timeNow">
          <%= searchAllData[i].created_date.toISOString().split('T')[0] %> <%
          const timeParts = searchAllData[i].created_time.split(':'); %> <%=
          timeParts[0] %>:<%= timeParts[1] %>&nbsp;&nbsp;
        </div>
      </div>

      <div class="bordContent">
        <br />
        <div class="bordContentTitle"><%= searchAllData[i].title %><br /></div>
        <br />
        <div class="bordContentContent"><%= searchAllData[i].content %></div>
      </div>
      <div class="bordComment">
        <!-- 비어있는 하트 -->
        <div class="heartNum">
          &nbsp;
          <i
            id="emptyHeart-<%= searchAllData[i].post_id%>"
            class="fa-regular fa-heart fa-lg"
            style="color: #db0606"
            onclick="clickHeart(this)"
          ></i>

          <div class="likeCount" id="likeCount-<%= searchAllData[i].post_id%>">
            &nbsp;<%= searchAllData[i].like_count %>&nbsp;
          </div>

          <!-- 댓글 갯수-->
          <div class="commentNum">
            <i
              id="commentNum-<%= searchAllData[i].post_id%>"
              class="fa-solid fa-comment-dots fa-lg"
              style="color: #000000"
              onclick="clickComment(this)"
            ></i>

            <% let commentNum = 0; %> <% for (let j = 0; j <
            commentAllData.length; j++) { %><% if (commentAllData[j].post_id ==
            searchAllData[i].post_id) { commentNum += 1; } %> <%}%>
            <div>&nbsp;<%= commentNum%>&nbsp;</div>
          </div>
        </div>
        <!-- 댓글작성 -->
        <div class="sendComment">
          <form
            name="sendForm-<%= searchAllData[i].post_id%>"
            id="sendForm-<%= searchAllData[i].post_id%>"
          >
            <textarea
              rows="1"
              cols="50"
              class="bordInputComment"
              id="bordInputComment"
              name="bordInputComment"
              placeholder="Comment"
            ></textarea>

            <!-- 전송버튼 -->
            <i
              class="fa-regular fa-paper-plane fa-lg"
              style="color: #000000"
              id="sendButton-<%= searchAllData[i].post_id%>"
              onclick="clickSendButton(this)"
            ></i>
          </form>
        </div>
      </div>
    </div>
    <% } %> <% } %>
  </body>
  <script>
    const postBord = document.querySelector(".postBord");
    const write = document.querySelector(".write");
    const list = document.querySelector(".list");
    const writeBord = document.querySelector(".writeBord");

    //user가 좋아요 눌러 놓은 post는 full 하트로 바꿔주기
    let UserlikePostId = "<%=signinUser[0].like_post_id%>";
    if (!(UserlikePostId == "" || UserlikePostId == "[]")) {
      UserlikePostId = UserlikePostId.slice(1, -1);
      UserlikePostId = UserlikePostId.split(",");
      UserlikePostId = UserlikePostId.map((item) => parseInt(item.trim()));
    } else {
      UserlikePostId = [];
    }

    //배열에 있는 post_id값과 일치하는 post의 하트들을 full하트로 바꿔주기
    for (let i = 0; i < UserlikePostId.length; i++) {
      let likeCount = "#emptyHeart-" + parseInt(UserlikePostId[i]);
      const defaultHeart = document.querySelector(likeCount);
      defaultHeart.classList.remove("fa-regular");
      defaultHeart.classList.add("fa-solid");
    }

    //localhost:8000/write
    function writeButton() {
      window.location.href = "/write";
    }
    //localhost:8000/list
    function listButton() {
      window.location.href = "/list";
    }

    //localhost:8000/search
    function search() {
      //검색 눌렀을 경우 데이터 베이스에서 일치하는 단어 있는 쿼리문 가져오기
      const searchInput = document.getElementById("search");
      if (!searchInput.value) {
        alert("검색어를 입력하세요");
      } else {
        window.location.href = `/search?searchInput=${searchInput.value}`;
      }
    }

    function clickBestPost(event) {
      const postId = event.id.split("-")[1];
      window.location.href = `/list/showPost?postId=${postId}`;
    }

    //댓글 아이콘 눌렀을 때 페이지 이동
    function clickComment(element) {
      const postId = element.id.split("-")[1];
      window.location.href = `/list/showPost?postId=${postId}`;
    }

    const arrHeartPostId = UserlikePostId;
    //하트 눌렀을 경우 like_count ++ 해주기
    function clickHeart(element) {
      // 좋아요 누른 post_id
      const emptyHeartNum = element.id.split("-")[1];
      //좋아요 누른 post_id를 배열로 만들어 signin_user에 저장하기

      //하트 선택
      let likeCount = "likeCount-" + emptyHeartNum;
      likeCount = document.querySelector(`#${likeCount}`);
      // 좋아요 아이콘 선택자 수정
      const heartIcon = document.querySelector("#" + element.id);

      if (heartIcon.classList.contains("fa-regular")) {
        // 좋아요
        heartIcon.classList.remove("fa-regular");
        heartIcon.classList.add("fa-solid");
        // 중복되지 않은 경우에만 좋아요 누른 게시물 배열에 push

        if (!arrHeartPostId.includes(parseInt(emptyHeartNum))) {
          arrHeartPostId.push(parseInt(emptyHeartNum));
        }
        //나중에 함수화 하기!!!
        axios({
          //데이터베이스에 좋아요+1 값 업데이트(새로고침 했을때 반영)
          method: "PATCH",
          url: "/",
          data: {
            postId: emptyHeartNum,
            msg: "fullHeart",
          },
        }).then((res) => {
          //좋아요수 + 1
          likeCount.textContent = res.data.likeCount[0].like_count + 1;
          window.location.href = `/`;
        });
      } else if (heartIcon.classList.contains("fa-solid")) {
        // 좋아요 취소
        heartIcon.classList.remove("fa-solid");
        heartIcon.classList.add("fa-regular");

        // 중복되는 값이 있는 경우에만 좋아요 누른 게시물 배열에 splice
        if (arrHeartPostId.includes(parseInt(emptyHeartNum))) {
          const index = arrHeartPostId.indexOf(parseInt(emptyHeartNum));
          if (index > -1) {
            arrHeartPostId.splice(index, 1);
          }
        }
        axios({
          method: "PATCH",
          url: "/",
          data: {
            postId: emptyHeartNum,
            msg: "emptyHeart",
          },
        }).then((res) => {
          //좋아요수 - 1
          likeCount.textContent = res.data.likeCount[0].like_count - 1;
          window.location.href = `/`;
        });
      }

      //signin_user에 저장하기
      axios({
        method: "PATCH",
        url: "/likeCountEdit",
        data: arrHeartPostId,
      }).then((res) => {
        alert("좋아요 배열 수정성공");
        window.location.href = "/"; //수정
      });
    }

    function mypostButton() {
      //내 게시물 모아보기(쿼리스트링으로 로그인한 user의 signin_id보냄)
      const signinId = "<%= signinUser[0].signin_id %>";
      window.location.href = `/myPost?signinId=${signinId}`;
    }

    // comment_id, post_id, author_id, content, created_date
    //댓글 쓰기
    function clickSendButton(element) {
      //게시글의 post_id
      const commentPostNum = element.id.split("-")[1];

      const Sendbord = document.forms["sendForm-" + commentPostNum];

      const today = new Date();
      const year = today.getFullYear();
      const month = today.getMonth() + 1;
      const day = today.getDate();
      const created_date = `${year}-${month}-${day}`;

      const now = new Date();
      const hours = now.getHours();
      const minutes = now.getMinutes();
      created_time = `${hours}:${minutes}`;

      //send버튼 눌렀을 때 댓글 저장하기
      const sendPostId = element.id.split("-")[1];

      if (Sendbord.bordInputComment.value != "") {
        const commentData = {
          post_id: sendPostId,
          signin_user_id: "<%= signinUser[0].signin_id%>",
          content: Sendbord.bordInputComment.value,
          created_date: created_date,
          created_time: created_time,
        };
        axios({
          method: "POST",
          url: "/",
          data: commentData,
        });
        alert("댓글 업로드");
        Sendbord.bordInputComment.value = "";
        window.location.href = "/";
      } else {
        alert("댓글을 작성해주세요");
      }
    }
  </script>
</html>
